//===---- OiISelDAGToDAG.h - A Dag to Dag Inst Selector for Oi --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the OI target.
//
//===----------------------------------------------------------------------===//

#ifndef OIISELDAGTODAG_H
#define OIISELDAGTODAG_H

#include "Oi.h"
#include "OiSubtarget.h"
#include "OiTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// OiDAGToDAGISel - OI specific code to select OI machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace llvm {

class OiDAGToDAGISel : public SelectionDAGISel {
public:
  explicit OiDAGToDAGISel(OiTargetMachine &TM)
    : SelectionDAGISel(TM), Subtarget(TM.getSubtarget<OiSubtarget>()) {}

  // Pass Name
  virtual const char *getPassName() const {
    return "OI DAG->DAG Pattern Instruction Selection";
  }

  virtual bool runOnMachineFunction(MachineFunction &MF);

protected:
  SDNode *getGlobalBaseReg();

  /// Keep a pointer to the OiSubtarget around so that we can make the right
  /// decision when generating code for different targets.
  const OiSubtarget &Subtarget;

private:
  // Include the pieces autogenerated from the target description.
  #include "OiGenDAGISel.inc"

  // Complex Pattern.
  /// (reg + imm).
  virtual bool selectAddrRegImm(SDValue Addr, SDValue &Base,
                                SDValue &Offset) const;

  /// Fall back on this function if all else fails.
  virtual bool selectAddrDefault(SDValue Addr, SDValue &Base,
                                 SDValue &Offset) const;

  /// Match integer address pattern.
  virtual bool selectIntAddr(SDValue Addr, SDValue &Base,
                             SDValue &Offset) const;

  virtual bool selectAddr16(SDNode *Parent, SDValue N, SDValue &Base,
                            SDValue &Offset, SDValue &Alias);

  virtual SDNode *Select(SDNode *N);

  virtual std::pair<bool, SDNode*> selectNode(SDNode *Node) = 0;

  // getImm - Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, uint64_t Imm) {
    return CurDAG->getTargetConstant(Imm, Node->getValueType(0));
  }

  virtual void processFunctionAfterISel(MachineFunction &MF) = 0;

  virtual bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                            char ConstraintCode,
                                            std::vector<SDValue> &OutOps);
};

/// createOiISelDag - This pass converts a legalized DAG into a
/// OI-specific DAG, ready for instruction scheduling.
FunctionPass *createOiISelDag(OiTargetMachine &TM);

}

#endif
