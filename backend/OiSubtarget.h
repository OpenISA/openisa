//===-- OiSubtarget.h - Define Subtarget for the Oi ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Oi specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef OISUBTARGET_H
#define OISUBTARGET_H

#include "MCTargetDesc/OiReginfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Target/TargetSubtargetInfo.h"

#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "OiGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class OiTargetMachine;

class OiSubtarget : public OiGenSubtargetInfo {
  virtual void anchor();

public:
  // NOTE: O64 will not be supported.
  enum OiABIEnum {
    UnknownABI, O32, N32, N64, EABI
  };

protected:

  enum OiArchEnum {
    Oi32, Oi32r2, Oi64, Oi64r2
  };

  // Oi architecture version
  OiArchEnum OiArchVersion;

  // Oi supported ABIs
  OiABIEnum OiABI;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  // IsSingleFloat - The target only supports single precision float
  // point operations. This enable the target to use all 32 32-bit
  // floating point registers instead of only using even ones.
  bool IsSingleFloat;

  // IsFP64bit - The target processor has 64-bit floating point registers.
  bool IsFP64bit;

  // IsFP64bit - General-purpose registers are 64 bits wide
  bool IsGP64bit;

  // HasVFPU - Processor has a vector floating point unit.
  bool HasVFPU;

  // isLinux - Target system is Linux. Is false we consider ELFOS for now.
  bool IsLinux;

  // UseSmallSection - Small section is used.
  bool UseSmallSection;

  /// Features related to the presence of specific instructions.

  // HasSEInReg - SEB and SEH (signext in register) instructions.
  bool HasSEInReg;

  // HasCondMov - Conditional mov (MOVZ, MOVN) instructions.
  bool HasCondMov;

  // HasSwap - Byte and half swap instructions.
  bool HasSwap;

  // HasBitCount - Count leading '1' and '0' bits.
  bool HasBitCount;

  // HasFPIdx -- Floating point indexed load/store instructions.
  bool HasFPIdx;

  // InOi16 -- can process Oi16 instructions
  bool InOi16Mode;

  // PreviousInOi16 -- the function we just processed was in Oi 16 Mode
  bool PreviousInOi16Mode;

  // InMicroOi -- can process MicroOi instructions
  bool InMicroOiMode;

  // HasDSP, HasDSPR2 -- supports DSP ASE.
  bool HasDSP, HasDSPR2;

  // Allow mixed Oi16 and Oi32 in one source file
  bool AllowMixed16_32;

  // Optimize for space by compiling all functions as Oi 16 unless
  // it needs floating point. Functions needing floating point are
  // compiled as Oi32
  bool Os16;

  InstrItineraryData InstrItins;

  // The instance to the register info section object
  OiReginfo MRI;

  // Relocation Model
  Reloc::Model RM;

  // We can override the determination of whether we are in oi16 mode
  // as from the command line
  enum {NoOverride, Oi16Override, NoOi16Override} OverrideMode;

  OiTargetMachine *TM;

public:
  virtual bool enablePostRAScheduler(CodeGenOpt::Level OptLevel,
                                     AntiDepBreakMode& Mode,
                                     RegClassVector& CriticalPathRCs) const;

  /// Only O32 and EABI supported right now.
  bool isABI_EABI() const { return OiABI == EABI; }
  bool isABI_N64() const { return OiABI == N64; }
  bool isABI_N32() const { return OiABI == N32; }
  bool isABI_O32() const { return OiABI == O32; }
  unsigned getTargetABI() const { return OiABI; }

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  OiSubtarget(const std::string &TT, const std::string &CPU,
                const std::string &FS, bool little, Reloc::Model RM,
                OiTargetMachine *TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool hasOi32() const { return OiArchVersion >= Oi32; }
  bool hasOi32r2() const { return OiArchVersion == Oi32r2 ||
                                   OiArchVersion == Oi64r2; }
  bool hasOi64() const { return OiArchVersion >= Oi64; }
  bool hasOi64r2() const { return OiArchVersion == Oi64r2; }

  bool isLittle() const { return IsLittle; }
  bool isFP64bit() const { return IsFP64bit; }
  bool isGP64bit() const { return IsGP64bit; }
  bool isGP32bit() const { return !IsGP64bit; }
  bool isSingleFloat() const { return IsSingleFloat; }
  bool isNotSingleFloat() const { return !IsSingleFloat; }
  bool hasVFPU() const { return HasVFPU; }
  bool inOi16Mode() const {
    switch (OverrideMode) {
    case NoOverride:
      return InOi16Mode;
    case Oi16Override:
      return true;
    case NoOi16Override:
      return false;
    }
    llvm_unreachable("Unexpected mode");
  }
  bool inOi16ModeDefault() {
    return InOi16Mode;
  }
  bool inMicroOiMode() const { return InMicroOiMode; }
  bool hasDSP() const { return HasDSP; }
  bool hasDSPR2() const { return HasDSPR2; }
  bool isLinux() const { return IsLinux; }
  bool useSmallSection() const { return UseSmallSection; }

  bool hasStandardEncoding() const { return !inOi16Mode(); }

  /// Features related to the presence of specific instructions.
  bool hasSEInReg()   const { return HasSEInReg; }
  bool hasCondMov()   const { return HasCondMov; }
  bool hasSwap()      const { return HasSwap; }
  bool hasBitCount()  const { return HasBitCount; }
  bool hasFPIdx()     const { return HasFPIdx; }

  bool allowMixed16_32() const { return AllowMixed16_32;};

  bool os16() const { return Os16;};

  // Grab OiRegInfo object
  const OiReginfo &getMReginfo() const { return MRI; }

  // Grab relocation model
  Reloc::Model getRelocationModel() const {return RM;}

  /// \brief Reset the subtarget for the Oi target.
  void resetSubtarget(MachineFunction *MF);


};
} // End llvm namespace

#endif
