# Mibench Basicmath Makefile adapted to run with OpenISA tools
LLVMLLC=llc -relocation-model=static -O3
LLVMLINK=llvm-link
CLANG=clang
OPT=opt -O3
EMITLLVM=-target mipsel-unknown-linux -emit-llvm -c --sysroot=/tools
CROSS=mipsel-unknown-linux-gnu-gcc
SBTOPT?=-optimize
STACKSIZE?=4000
CLANGARM=arm-linux-musleabihf-gcc-4.7.3 -static
ARCH?=x86
MATTR?=

FILE1_basenames := $(sort $(basename $(FILE1)))
FILE1_bcs := $(FILE1_basenames:%=%.bc)
FILE1_bc2s := $(FILE1_basenames:%=%.bc2)
FILE2_basenames := $(sort $(basename $(FILE2)))
FILE2_bcs := $(FILE2_basenames:%=%.bc)
FILE2_bc2s := $(FILE2_basenames:%=%.bc2)

TODO := $(TARGETS:%=%-oi-$(ARCH)) $(TARGETS:%=%-nat-$(ARCH))

all: $(TODO)

$(BENCHNAME)-nat-x86: ${BENCHNAME}-nat.bc Makefile
	$(LLVMLLC) -march=x86 $(MATTR) ${BENCHNAME}-nat.bc -o $(BENCHNAME)-nat-x86.s
	$(CLANG) -g ${BENCHNAME}-nat-x86.s -o $(BENCHNAME)-nat-x86 -lm
$(BENCHNAME2)-nat-x86: ${BENCHNAME2}-nat.bc Makefile
	$(LLVMLLC) -march=x86 $(MATTR) ${BENCHNAME2}-nat.bc -o $(BENCHNAME2)-nat-x86.s
	$(CLANG) -g ${BENCHNAME2}-nat-x86.s -o $(BENCHNAME2)-nat-x86 -lm

$(BENCHNAME)-nat-arm: ${FILE1} Makefile
	$(CLANGARM) -std=c99 -O3 -static ${FILE1} -o $(BENCHNAME)-nat -lm
$(BENCHNAME2)-nat-arm: ${FILE2} Makefile
	$(CLANGARM) -std=c99 -O3 -static ${FILE2} -o $(BENCHNAME2)-nat -lm

#
# Wildcard rules
#
%.bc : %.c
	$(CLANG) $(EMITLLVM) $< -o $@

%.bc2 : %.c
	$(CLANG) -emit-llvm -c $< -o $@

$(BENCHNAME)-oi-arm: $(BENCHNAME)-oi.bc
	$(LLVMLLC) -march=$(ARCH) $(MATTR) $(BENCHNAME)-oi.bc -o $(BENCHNAME)-oi-$(ARCH).s
	echo " .eabi_attribute 27, 3\n    	 .eabi_attribute 28, 1\n	.eabi_attribute 26, 2\n	.eabi_attribute 30, 6\n	.eabi_attribute 34, 1\n	.eabi_attribute 18, 4" > aa.s
	cat $(BENCHNAME)-oi-$(ARCH).s >> aa.s
	$(CLANGARM) -g aa.s -o $(BENCHNAME)-oi-$(ARCH) -lm

$(BENCHNAME)-oi-x86: $(BENCHNAME)-oi.bc
	$(LLVMLLC) -march=$(ARCH) $(MATTR) $(BENCHNAME)-oi.bc -o $(BENCHNAME)-oi-$(ARCH).s
	$(CLANG) -g $(BENCHNAME)-oi-$(ARCH).s -o $(BENCHNAME)-oi-$(ARCH) -lm

$(BENCHNAME)-oi.bc: ${FILE1_bcs}
	$(LLVMLINK) ${FILE1_bcs} -o $(BENCHNAME).bc 
	$(OPT) $(BENCHNAME).bc -o $(BENCHNAME).bc
	$(LLVMLLC) -load=../../../backend/OIBackend.so -march=oiel $(BENCHNAME).bc -o $(BENCHNAME).s
	../../../backend/oife -assemble -filetype=obj -o=$(BENCHNAME)-oi.o $(BENCHNAME).s
	../../../backend/oisbt $(SBTOPT) -stacksize $(STACKSIZE) $(BENCHNAME)-oi.o -o=$(BENCHNAME)-oi.bc
	$(OPT) $(BENCHNAME)-oi.bc -o $(BENCHNAME)-oi.bc


$(BENCHNAME2)-oi.bc: ${FILE2_bcs}
	$(LLVMLINK) ${FILE2_bcs} -o $(BENCHNAME2).bc 
	$(OPT) $(BENCHNAME2).bc -o $(BENCHNAME2).bc
	$(LLVMLLC) -load=../../../backend/OIBackend.so -march=oiel $(BENCHNAME2).bc -o $(BENCHNAME2).s
	../../../backend/oife -assemble -filetype=obj -o=$(BENCHNAME2)-oi.o $(BENCHNAME2).s
	../../../backend/oisbt $(SBTOPT) -stacksize $(STACKSIZE) $(BENCHNAME2)-oi.o -o=$(BENCHNAME2)-oi.bc
	$(OPT) $(BENCHNAME2)-oi.bc -o $(BENCHNAME2)-oi.bc

$(BENCHNAME)-nat.bc: ${FILE1_bc2s}
	$(LLVMLINK) ${FILE1_bc2s} -o $(BENCHNAME)-nat.bc
	$(OPT) $(BENCHNAME)-nat.bc -o $(BENCHNAME)-nat.bc
	$(OPT) $(BENCHNAME)-nat.bc -o $(BENCHNAME)-nat.bc


$(BENCHNAME2)-nat.bc: ${FILE2_bc2s}
	$(LLVMLINK) ${FILE2_bc2s} -o $(BENCHNAME2)-nat.bc
	$(OPT) $(BENCHNAME2)-nat.bc -o $(BENCHNAME2)-nat.bc
	$(OPT) $(BENCHNAME2)-nat.bc -o $(BENCHNAME2)-nat.bc

$(BENCHNAME2)-oi-arm: $(BENCHNAME2)-oi.bc
	$(LLVMLLC) -march=$(ARCH) $(MATTR) $(BENCHNAME2)-oi.bc -o $(BENCHNAME2)-oi-$(ARCH).s
	echo " .eabi_attribute 27, 3\n    	 .eabi_attribute 28, 1\n	.eabi_attribute 26, 2\n	.eabi_attribute 30, 6\n	.eabi_attribute 34, 1\n	.eabi_attribute 18, 4" > aa.s
	cat $(BENCHNAME)-oi-$(ARCH).s >> aa.s
	$(CLANGARM) -g aa.s -o $(BENCHNAME2)-oi-$(ARCH) -lm

$(BENCHNAME2)-oi-x86: $(BENCHNAME2)-oi.bc
	$(LLVMLLC) -march=$(ARCH) $(MATTR) $(BENCHNAME2)-oi.bc -o $(BENCHNAME2)-oi-$(ARCH).s
	$(CLANG) -g $(BENCHNAME2)-oi-$(ARCH).s -o $(BENCHNAME2)-oi-$(ARCH) -lm

clean:
	rm -rf output* *.bc *.bc2 *.o *.s $(TODO)
